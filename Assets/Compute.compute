#pragma kernel Update

struct Root {
	float2 position;
	float angle;
	int speciesIndex;
    int age;
    int alive;
    float width;
	float speed;
    float plantTime;
};

RWStructuredBuffer<int> rootCount;


RWStructuredBuffer<Root> roots;

RWTexture2D<float4> TrialTexture;
float width;
float height;
float time;
float deltaTime;
int numRoots;

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

float getNewAngle(float2 pos, uint3 id, float angle) {
    uint random = hash(pos.y * width + pos.x + hash(id.x + time));
    float randomSteerStrength = scaleToRange01(random);

    if (angle > 0) {
        return angle - randomSteerStrength / 4.0;
    } 

    if (angle < -3.1415) { 
        return angle + randomSteerStrength / 4.0;
    }

    return angle - (randomSteerStrength - 0.5) / 4.0;
}

[numthreads(16,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    
    int agentCounter = rootCount[0];
    
    if (id.x >= agentCounter) {
        return;
    }

    Root root = roots[id.x];

    if (root.alive == 0) {
        return;
    }

    float2 direction = float2(cos(root.angle), sin(root.angle));
	float2 newPos = root.position + direction * root.speed * (1 - root.age / 8.0);

    //int sampleX = min(1280 - 1, max(0, root.position.x));
    //int sampleY = min(720 - 1, max(0, root.position.y));
    
    if (root.position.x < 0 || root.position.x >= 1280 || root.position.y < 0 || root.position.y >= 720) {
        return; 
    }

    //TrialTexture[int2(root.position)] = float4(direction.x, direction.y, root.width , 0.0); 
    TrialTexture[int2(root.position)] = float4(1, 1, root.width , 0.0); 

    roots[id.x].position = newPos;
    roots[id.x].angle = getNewAngle(root.position, id, root.angle);
    //roots[id.x].speed = max(0, root.speed - 0.01);
}


// ---------------------------------------


#pragma kernel Grow

RWTexture2D<float4> TrailInputTexture;
RWTexture2D<float4> DataOutputTexture;

[numthreads(8,8,1)]
void Grow (uint3 id : SV_DispatchThreadID)
{   
    float4 sum = 0;
	
    // 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(1280 - 1, max(0, id.x + offsetX));
			int sampleY = min(720 - 1, max(0, id.y + offsetY));
			sum += max(
                TrailInputTexture[int2(sampleX, sampleY)],
                DataOutputTexture[int2(sampleX, sampleY)]
            );
		}
	}
    float4 col = sum / 9;
    
    float coefficient;

    if (col.z > 0.9) {
        coefficient = 0.9999;
    } else if (col.z > 0.7) {
        coefficient = 0.99;
    } else if (col.z > 0.4) {
        coefficient = 0.98;
    } else if (col.z > 0.1) {
        coefficient = 0.96;
    } else {
        coefficient = 0.92;
    }
    

    DataOutputTexture[id.xy] = col * 0.999;
}

// ----------------------------------------

#pragma kernel Display

RWTexture2D<float4> Source;
RWTexture2D<float4> Result;
RWTexture2D<float4> FloorTexture;

[numthreads(8,8,1)]
void Display (uint3 id : SV_DispatchThreadID)
{   
    float threshold = 0.8;
    float threshold2 = 0.2;
    float4 col = float4(
        0.69 * Source[id.xy].x * 0.8,
        0.49 * Source[id.xy].y * 0.8, 
        0.27 * Source[id.xy].z * 0.2, 
        Source[id.xy].a + 0.9
    );

    float maxVal = 1 - max(Source[id.xy].x, max(Source[id.xy].y, Source[id.xy].z));
    Result[id.xy] = lerp(col, FloorTexture[id.xy], 0.5);
}

// ----------------------------------------

#pragma kernel InitDisplay

RWTexture2D<float4> texDisplay;

[numthreads(8,8,1)]
void InitDisplay (uint3 id : SV_DispatchThreadID)
{   
    //texDisplay[id.xy] = float4(0.3, 0.4, 0.91, 1.0);
}

