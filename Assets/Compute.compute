#pragma kernel Update

struct Root {
	float2 position;
	float angle;
	int speciesIndex;
    int age;
    int alive;
	float speed;
    float plantTime;
};


RWStructuredBuffer<Root> roots;

RWTexture2D<float4> TrialTexture;
float width;
float height;
float time;
float deltaTime;
int numRoots;

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

float getRandomAngleChange(float2 pos, uint3 id) {
    uint random = hash(pos.y * width + pos.x + hash(id.x + time));
    float randomSteerStrength = scaleToRange01(random);
    return (randomSteerStrength - 0.5) / 4.0;
}

[numthreads(16,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numRoots) {
        return;
    }

    Root root = roots[id.x];

    if (root.alive == 0) {
        return;
    }

    float2 direction = float2(cos(root.angle), sin(root.angle));
	float2 newPos = root.position + direction * root.speed;

    //int sampleX = min(1280 - 1, max(0, root.position.x));
    //int sampleY = min(720 - 1, max(0, root.position.y));
    
    if (root.position.x < 0 || root.position.x >= 1280 || root.position.y < 0 || root.position.y >= 720) {
        return; 
    }

    TrialTexture[int2(root.position)] = float4(direction.x, direction.y, 1.0, 0.0); 

    roots[id.x].position = newPos;
    roots[id.x].angle += getRandomAngleChange(root.position, id);
    //roots[id.x].speed = max(0, root.speed - 0.01);
}


// ---------------------------------------


#pragma kernel Grow

RWTexture2D<float4> DataTexture;

[numthreads(8,8,1)]
void Grow (uint3 id : SV_DispatchThreadID)
{   
    float4 sum = 0;
	
    // 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(1280 - 1, max(0, id.x + offsetX));
			int sampleY = min(720 - 1, max(0, id.y + offsetY));
			sum += DataTexture[int2(sampleX, sampleY)];
		}
	}

	DataTexture[id.xy] = sum / 8.99;
}

// ----------------------------------------

#pragma kernel Display

RWTexture2D<float4> Source;
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void Display (uint3 id : SV_DispatchThreadID)
{   
    Result[id.xy] = Source[id.xy];
}