#pragma kernel Update

struct Root {
	float2 position;
	float angle;
	int speciesIndex;
    int age;
    int alive;
	float speed;
};


RWStructuredBuffer<Root> roots;

RWTexture2D<float4> DataTexture;
float width;
float height;
float time;
float deltaTime;
uint numRoots;

uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

[numthreads(16,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numRoots) {
        return;
    }

    Root root = roots[id.x];

    if (root.alive == 0) {
        return;
    }

    uint random = hash(root.position.y * width + root.position.x + hash(id.x + time * 100000));
	float dieRandom = scaleToRange01(random);


    if (dieRandom < 0.02) {
        roots[id.x].alive = 0;
    }

    int sampleX = min(width-1, max(0, root.position.x));
    int sampleY = min(height-1, max(0, root.position.y));

    DataTexture[int2(root.position.x, root.position.y)] = 1; 

    float2 direction = float2(cos(root.angle), sin(root.angle));
	float2 newPos = root.position + direction * root.speed;

    roots[id.x].position = newPos;
    //roots[id.x].speed = max(0, root.speed - 0.01);
}


// ---------------------------------------


#pragma kernel Grow

RWTexture2D<float4> Texture;

[numthreads(8,8,1)]
void Grow (uint3 id : SV_DispatchThreadID)
{   
    float4 sum = 0;
	
    // 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(1280 - 1, max(0, id.x + offsetX));
			int sampleY = min(720 - 1, max(0, id.y + offsetY));
			sum += Texture[int2(sampleX, sampleY)];
		}
	}

	Texture[id.xy] = sum / 8.95;
}

// ----------------------------------------

#pragma kernel Display

RWTexture2D<float4> Source;
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void Display (uint3 id : SV_DispatchThreadID)
{   
    Result[id.xy] = Source[id.xy];
}